{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "TgtgPollerLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "tgtg-poller-lambda-role",

                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": ["sts:AssumeRole"],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": ["lambda.amazonaws.com"]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "logs:CreateLogGroup",
                                    "Resource": {
                                        "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tgtg-poller-lambda:*"
                                        }
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "CloudwatchLogsInlinePolicy"
                    }
                ],
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
                    "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
                ],
                "Path": "/"
            }
        },
        "TgtgPollerLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Role": {
                    "Fn::GetAtt": ["TgtgPollerLambdaRole", "Arn"]
                },
                "FunctionName": "tgtg-poller-lambda",
                "Code": {
                    "ImageUri": "166718199143.dkr.ecr.eu-central-1.amazonaws.com/tgtg-poller:latest"
                },
                "PackageType": "Image",
                "Timeout": 180,
                "Environment": {
                    "Variables": {
                        "PROXY_HTTP": "http-proxy-url",
                        "PROXY_HTTPS": "https-proxy-url"
                    }
                }
            }
        },
        "TgtgPollerLambdaUrl": {
            "Type": "AWS::Lambda::Url",
            "Properties": {
                "AuthType": "NONE",
                "Cors": {
                    "AllowOrigins": ["*"]
                },
                "TargetFunctionArn": {
                    "Fn::GetAtt": ["TgtgPollerLambda", "Arn"]
                }
            }
        },
        "TgTgPollerLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunctionUrl",
                "FunctionName": { "Fn::GetAtt": ["TgtgPollerLambda", "Arn"] },
                "FunctionUrlAuthType": "NONE",
                "Principal": "*"
            }
        },
        "TgtgLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": [
                        "",
                        ["/aws/lambda/", { "Ref": "TgtgPollerLambda" }]
                    ]
                },
                "RetentionInDays": 90
            }
        },
        "tgtgTokens": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "KeySchema": [
                    {
                        "AttributeName": "email",
                        "KeyType": "HASH"
                    }
                ],
                "AttributeDefinitions": [
                    {
                        "AttributeName": "email",
                        "AttributeType": "S"
                    }
                ],
                "GlobalSecondaryIndexes": [],
                "BillingMode": "PROVISIONED",
                "TableName": "tgtgTokens",
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                }
            }
        },
        "TabletgtgTokensReadCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "DependsOn": "tgtgTokens",
            "Properties": {
                "ServiceNamespace": "dynamodb",
                "ResourceId": "table/tgtgTokens",
                "ScalableDimension": "dynamodb:table:ReadCapacityUnits",
                "MinCapacity": 1,
                "MaxCapacity": 10,
                "RoleARN": {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable"
                }
            }
        },
        "TabletgtgTokensReadCapacityScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "DependsOn": "TabletgtgTokensReadCapacityScalableTarget",
            "Properties": {
                "ServiceNamespace": "dynamodb",
                "ResourceId": "table/tgtgTokens",
                "ScalableDimension": "dynamodb:table:ReadCapacityUnits",
                "PolicyName": "tgtgTokens-read-capacity-scaling-policy",
                "PolicyType": "TargetTrackingScaling",
                "TargetTrackingScalingPolicyConfiguration": {
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBReadCapacityUtilization"
                    },
                    "ScaleOutCooldown": 60,
                    "ScaleInCooldown": 60,
                    "TargetValue": 70
                }
            }
        },
        "TabletgtgTokensWriteCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "DependsOn": "tgtgTokens",
            "Properties": {
                "ServiceNamespace": "dynamodb",
                "ResourceId": "table/tgtgTokens",
                "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
                "MinCapacity": 1,
                "MaxCapacity": 10,
                "RoleARN": {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable"
                }
            }
        },
        "TabletgtgTokensWriteCapacityScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "DependsOn": "TabletgtgTokensWriteCapacityScalableTarget",
            "Properties": {
                "ServiceNamespace": "dynamodb",
                "ResourceId": "table/tgtgTokens",
                "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
                "PolicyName": "tgtgTokens-write-capacity-scaling-policy",
                "PolicyType": "TargetTrackingScaling",
                "TargetTrackingScalingPolicyConfiguration": {
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
                    },
                    "ScaleOutCooldown": 60,
                    "ScaleInCooldown": 60,
                    "TargetValue": 70
                }
            }
        },
        "tgtgProducts": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "KeySchema": [
                    {
                        "AttributeName": "email",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "productId",
                        "KeyType": "RANGE"
                    }
                ],
                "AttributeDefinitions": [
                    {
                        "AttributeName": "email",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "productId",
                        "AttributeType": "S"
                    }
                ],
                "GlobalSecondaryIndexes": [],
                "BillingMode": "PROVISIONED",
                "TableName": "tgtgProducts",
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                }
            }
        },
        "tgtgUpdateProductsEventbridgeRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Polls Tgtg server periodically to get products and updates them in DB",
                "Name": "tgtg-update-products",
                "ScheduleExpression": "rate(6 minutes)",
                "Targets": [
                    {
                        "Arn": { "Fn::GetAtt": ["TgtgPollerLambda", "Arn"] },
                        "Id": "tgtg-poller-lambda-target",
                        "Input": "{\n  \"resource\": \"/my/path\",\n  \"path\": \"/products/update\",\n  \"httpMethod\": \"POST\",\n  \"headers\": {\n    \"header1\": \"value1\",\n    \"header2\": \"value2\"\n  },\n  \"multiValueHeaders\": {\n    \"header1\": [\n      \"value1\"\n    ],\n    \"header2\": [\n      \"value1\",\n      \"value2\"\n    ]\n  },\n  \"queryStringParameters\": {\n    \"parameter1\": \"value1\",\n    \"parameter2\": \"value\"\n  },\n  \"multiValueQueryStringParameters\": {\n    \"parameter1\": [\n      \"value1\",\n      \"value2\"\n    ],\n    \"parameter2\": [\n      \"value\"\n    ]\n  },\n  \"requestContext\": {\n    \"accountId\": \"123456789012\",\n    \"apiId\": \"id\",\n    \"authorizer\": {\n      \"claims\": null,\n      \"scopes\": null\n    },\n    \"domainName\": \"id.execute-api.us-east-1.amazonaws.com\",\n    \"domainPrefix\": \"id\",\n    \"extendedRequestId\": \"request-id\",\n    \"httpMethod\": \"GET\",\n    \"identity\": {\n      \"accessKey\": null,\n      \"accountId\": null,\n      \"caller\": null,\n      \"cognitoAuthenticationProvider\": null,\n      \"cognitoAuthenticationType\": null,\n      \"cognitoIdentityId\": null,\n      \"cognitoIdentityPoolId\": null,\n      \"principalOrgId\": null,\n      \"sourceIp\": \"IP\",\n      \"user\": null,\n      \"userAgent\": \"user-agent\",\n      \"userArn\": null,\n      \"clientCert\": {\n        \"clientCertPem\": \"CERT_CONTENT\",\n        \"subjectDN\": \"www.example.com\",\n        \"issuerDN\": \"Example issuer\",\n        \"serialNumber\": \"a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1:a1\",\n        \"validity\": {\n          \"notBefore\": \"May 28 12:30:02 2019 GMT\",\n          \"notAfter\": \"Aug  5 09:36:04 2021 GMT\"\n        }\n      }\n    },\n    \"path\": \"/my/path\",\n    \"protocol\": \"HTTP/1.1\",\n    \"requestId\": \"id=\",\n    \"requestTime\": \"04/Mar/2020:19:15:17 +0000\",\n    \"requestTimeEpoch\": 1583349317135,\n    \"resourceId\": null,\n    \"resourcePath\": \"/my/path\",\n    \"stage\": \"$default\"\n  },\n  \"pathParameters\": null,\n  \"stageVariables\": null,\n  \"body\": \"Hello from Lambda!\",\n  \"isBase64Encoded\": false\n}"
                    }
                ]
            }
        },
        "PermissionForEventsToInvokeLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": { "Ref": "TgtgPollerLambda" },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": ["tgtgUpdateProductsEventbridgeRule", "Arn"]
                }
            }
        }
    }
}
